// const http = require('http');

// const allowedOrigins = [
//   'https://ce03510-wordpress-og5g7.tw1.ru',
//   'http://127.0.0.1:5500',
//   'https://testserver-eight-olive.vercel.app'
// ];

// const server = http.createServer((req, res) => {
//   const origin = req.headers.origin;

//   // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ Origin —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º
//   if (allowedOrigins.includes(origin)) {
//     res.writeHead(200, {
//       'Access-Control-Allow-Origin': origin,
//       'Content-Type': 'text/html',
//     });
//   } else {
//     res.writeHead(403, {
//       'Content-Type': 'text/html',
//     });
//     res.end('<h1>403 Forbidden: Access is denied</h1>');
//     return;
//   }

//   console.log('+++OK');
//   res.end('<h1>Answer from server on port 5000!!!!!!!!!!!!</h1> <a href="#">Link</a>');
// });

// server.listen(5000, () => {
//   console.log('–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000');
// });


const express = require('express');
const mysql = require('mysql2');
const mysqlPromis = require('mysql2/promise');
const cors = require('cors');
const multer = require('multer');
const axios = require('axios');
const FormData = require('form-data');
require('dotenv').config();


const app = express();
app.use(express.json());

// CORS
const allowedOrigins = [
  'https://ce03510-wordpress-og5g7.tw1.ru',
  'http://127.0.0.1:5500',
  'https://testserver-eight-olive.vercel.app',
  'https://testserverrender.onrender.com',
  'http://localhost:5173',
  'http://127.0.0.1:5173',
  'http://localhost:3000',
  'http://127.0.0.1:3000'
];

app.use(cors({
  origin: function (origin, callback) {
    if (!origin || allowedOrigins.includes(origin)) {
      callback(null, true);
    } else {
      callback(new Error('Not allowed by CORS'));
    }
  }
}));

// MySQL config
const DATA = {
  host: process.env.DB_HOST,
  port: process.env.DB_PORT,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_DATABASE
};

// ==============================
// üìå GET /bd/:id ‚Äî  –ø–æ–ª—É—á–∞—Ç—å –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ id
// ==============================
app.get('/bd/:id', async (req, res) => {
  const { id } = req.params;
  try {
    const person = await HomeworkHuman.findOne({
      where: { id: id, is_published: true },
      attributes: ['Name', 'photo', 'telephone', 'portfolio'],
      include: [{
        model: HomeworkProfession,
        as: 'profession',
        attributes: ['title']
      }]
    });
    if (!person) {
      return res.status(404).json({ message: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }
    const formatted = {
      id: person.id,
      Name: person.Name,
      photo: person.photo,
      telephone: person.telephone,
      portfolio: person.portfolio,
      profession_title: person.profession?.title || ''
    };
    res.json({ result: formatted });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ ORM:', error);
    res.status(500).json({ error: error.message });
  }
});


// ==============================
// üìå POST /bd ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫
// ==============================
// app.post('/bd', (req, res) => {
//   const connection = mysql.createConnection(DATA);
//   connection.connect();

//   const query = `
//     SELECT 
//       hh.Name, 
//       hh.photo, 
//       hh.telephone, 
//       hp.title AS profession_title,
//       hh.portfolio
//     FROM homework_human AS hh
//     JOIN homework_profession AS hp ON hh.profession_id = hp.id
//     WHERE hh.is_published = true;
//   `;

//   connection.query(query, (error, result) => {
//     connection.end();
//     if (error) {
//       res.status(500).json({ error: error.message });
//     } else {
//       res.json({ message: '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–¥ —Å–æ—Å—Ç–æ—è–ª–æ—Å—å', result });
//     }
//   });
// });

// –†–∞–±–æ—Ç–∞ —Å –û–†–ú:
const { HomeworkHuman, HomeworkProfession } = require('./bd');
// –∑–∞–¥–∞–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏:
HomeworkHuman.belongsTo(HomeworkProfession, {
  foreignKey: 'profession_id',
  as: 'profession' // —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç `as` –≤ `include`
});

app.post('/bd', async (req, res) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö is_published = true
    const result = await HomeworkHuman.findAll({
      where: { is_published: true },
      attributes: ['Name', 'photo', 'telephone', 'portfolio'],
      include: [{
        model: HomeworkProfession,
        as: 'profession', // –∏–ª–∏ –¥—Ä—É–≥–æ–µ –∏–º—è, –µ—Å–ª–∏ –≤ —Å–≤—è–∑–∏ –≤ –º–æ–¥–µ–ª–∏ –∑–∞–¥–∞–Ω–æ `as`
        attributes: ['title']
      }]
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º profession -> profession_title
    const formatted = result.map(item => ({
      id: person.id,
      Name: item.Name,
      photo: item.photo,
      telephone: item.telephone,
      portfolio: item.portfolio,
      profession_title: item.profession?.title || ''
    }));

    res.json({ message: '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ë–î —á–µ—Ä–µ–∑ ORM —Å–æ—Å—Ç–æ—è–ª–æ—Å—å', result: formatted });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ ORM:', error);
    res.status(500).json({ error: error.message });
  }
});

// ==============================
// üìå POST /bdPost ‚Äî –ø—Ä–∏—ë–º —Ñ–æ—Ä–º—ã
// ==============================

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.memoryStorage();
// const upload = multer({ storage: storage });
const upload = multer({
  storage: storage,
  limits: {
    fileSize: 5 * 1024 * 1024,
    fieldSize: 50 * 1024 * 1024
  }
});


// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π upload, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏ –æ–¥–∏–Ω–æ—á–Ω–æ–µ, –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
const uploadFields = upload.fields([
  { name: 'photo', maxCount: 1 },
  { name: 'portfolio', maxCount: 10 }
]);

app.post('/bdPost', uploadFields, async (req, res) => {
  console.log('req.files:', req.files);
  console.log('req.body:', req.body);

  const photoFile = req.files['photo']?.[0];       // –í–∏–∑–∏—Ç–∫–∞
  const portfolioFiles = req.files['portfolio'] || []; // –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ

  console.log('üìé photoFile:', req.files['photo']?.[0]);


  if (!photoFile) {
    return res.status(400).json({ error: '–ü–æ–ª–µ photo –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
  }

  try {
    // üîª –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–∑–∏—Ç–∫—É
    const photoForm = new FormData();
    photoForm.append('file', photoFile.buffer, photoFile.originalname);

    const photoUploadResponse = await axios.post(
      'https://ce03510-wordpress-og5g7.tw1.ru/api/upload.php',
      photoForm,
      { headers: photoForm.getHeaders() }
    );

    // const photoUrl = photoUploadResponse.data?.fileUrl;// –¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π URL
    const photoFullUrl = photoUploadResponse.data?.fileUrl;
    const photoUrl = photoFullUrl?.split('/').slice(-1).join('/'); // '/—Ñ–∞–π–ª'
    if (!photoUrl) {
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–∑–∏—Ç–∫–∏ (photo)' });
    }

    // üîª –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
    const uploadedPortfolioUrls = [];

    for (const file of portfolioFiles) {
      const form = new FormData();
      form.append('file', file.buffer, file.originalname);

      const response = await axios.post(
        'https://ce03510-wordpress-og5g7.tw1.ru/api/upload.php',
        form,
        { headers: form.getHeaders() }
      );

      if (response.data && response.data.fileUrl) {
        // uploadedPortfolioUrls.push(response.data.fileUrl);// –¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π URL
        const relativeUrl = response.data.fileUrl.split('/').slice(-2).join('/');// 'media/—Ñ–∞–π–ª'
        // uploadedPortfolioUrls.push(relativeUrl);
        const imgTag = `<img alt="" src="https://ce03510-wordpress-og5g7.tw1.ru/api/${relativeUrl}" style="height:380px; width:285px">`;
        uploadedPortfolioUrls.push(imgTag);
      } else {
        console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ –ë–î:', err.message);

        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ' });
      }
    }

    // // üîª –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    // const connection = mysql.createConnection(DATA);
    // connection.connect();

    // const portfolioString = uploadedPortfolioUrls.join(' ');

    // const name = req.body.Name || '–ë–µ–∑ –∏–º–µ–Ω–∏';
    // // const telephone = req.body.telephone || '';
    // const telephoneRaw = req.body.telephone;
    // const telephone = telephoneRaw
    //   ? `<a href="tel:${telephoneRaw}" style="color: blue;"><h5>${telephoneRaw}</h5></a>`
    //   : '';
    // const professionId = req.body.profession_id || 9;
    // const speciality = req.body.speciality || '';

    // const insertQuery = `
    //   INSERT INTO homework_human (Name, photo, telephone, profession_id, speciality, portfolio, is_published)
    //   VALUES (?, ?, ?, ?, ?, ?, true)
    // `;

    // connection.query(insertQuery, [name, photoUrl, telephone, professionId, speciality, portfolioString], (error, result) => {
    //   connection.end();
    //   if (error) {
    //     return res.status(500).json({ error: error.message });
    //   } else {
    //     return res.json({
    //       success: true,
    //       insertedId: result.insertId,
    //       photo: photoUrl,
    //       portfolio: uploadedPortfolioUrls
    //     });
    //   }
    // });

    // üîª –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î —á–µ—Ä–µ–∑ ORM
    const name = req.body.Name || '–ë–µ–∑ –∏–º–µ–Ω–∏';
    const telephoneRaw = req.body.telephone;
    const telephone = telephoneRaw
      ? `<a href="tel:${telephoneRaw}" style="color: blue;"><h5>${telephoneRaw}</h5></a>`
      : '';
    const professionId = req.body.profession_id || 9;
    const speciality = req.body.speciality || '';
    const portfolioString = uploadedPortfolioUrls.join(' ');

    const created = await HomeworkHuman.create({
      Name: name,
      photo: photoUrl,
      telephone: telephone,
      profession_id: professionId,
      speciality: speciality,
      portfolio: portfolioString,
      is_published: true
    });

    return res.json({
      success: true,
      insertedId: created.id,
      photo: photoUrl,
      portfolio: uploadedPortfolioUrls
    });


  } catch (err) {
    console.error('–û—à–∏–±–∫–∞:', err);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–ª–∏ –∑–∞–ø–∏—Å–∏ –≤ –ë–î' });
  }
});
// ==============================
// üìå POST /deletePerson ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
// ==============================
app.post('/deletePerson', async (req, res) => {
  const origin = req.headers.origin;
  if (allowedOrigins.includes(origin)) {
    res.setHeader('Access-Control-Allow-Origin', origin);
  }

  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  const { photo, portfolio } = req.body;

  if (!photo) {
    return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ photo' });
  }

  // try {
  //   // ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ —á–µ—Ä–µ–∑ mysql2/promise
  //   const connection = await mysqlPromis.createConnection(DATA);

  //   const deleteQuery = 'DELETE FROM homework_human WHERE photo = ?';
  //   const [result] = await connection.execute(deleteQuery, [photo]);

  //   await connection.end();

  //   if (result.affectedRows === 0) {
  //     return res.status(404).json({ error: '–ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º photo –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  //   }

  // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î —á–µ—Ä–µ–∑ ORM:
    try {
    // üîç –ù–∞–π–¥—ë–º –∑–∞–ø–∏—Å—å –ø–æ `photo`
    const human = await HomeworkHuman.findOne({ where: { photo } });
    if (!human) {
      return res.status(404).json({ error: '–ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º photo –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î
    await human.destroy();


    try {
      // –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–∑–∏—Ç–∫–∏
      await axios.post('https://ce03510-wordpress-og5g7.tw1.ru/api/delete.php', {
        file: `media/${photo}`
      });

      // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
      if (portfolio) {
        const imgUrls = [...portfolio.matchAll(/src="([^"]+)"/g)].map(match => match[1]);

        for (const fullUrl of imgUrls) {
          const relPath = fullUrl.split('/api/')[1]; // 'media/—Ñ–∞–π–ª'
          if (relPath) {
            await axios.post('https://ce03510-wordpress-og5g7.tw1.ru/api/delete.php', {
              file: relPath
            });
          }
        }
      }

      res.status(200).json({ success: true, message: '–£–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ' });

    } catch (deleteError) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤:', deleteError.message);
      res.status(500).json({ error: '–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ë–î –ø—Ä–æ—à–ª–æ, –Ω–æ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤' });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏' });
  }
});

// –ü–∏–Ω–≥-–ø–æ–Ω–≥ –¥–ª—è Timeweb
app.get('/api/ping', (req, res) => {
  console.log('–ü–∏–Ω–≥ –æ—Ç Timeweb: ' + new Date().toISOString());
  res.send('pong!!!');
});


// ==============================
// üìå –ó–∞–≥–ª—É—à–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
// ==============================
app.get('/', (req, res) => {
  res.end('<h1>Answer from server on port 5000!!!!!!!!!!!!</h1> <a href="#">Link</a>');
});

// ==============================
// üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—á–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
// ==============================
app.use((req, res) => {
  res.status(404).send('<h1>404!!!</h1>');
});

// ==============================
// üìå –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
// ==============================
// app.listen(5000, () => console.log('Server running on port 5000'));

// –í —Å–∞–º–æ–º –Ω–∏–∑—É server.js
const { sequelize } = require('./bd');

(async () => {
  try {
    await sequelize.authenticate();
    console.log('‚úÖ Sequelize –ø–æ–¥–∫–ª—é—á—ë–Ω');
    await sequelize.sync(); // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    app.listen(5000, () => console.log('üöÄ –°–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç 5000'));
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ë–î:', err);
  }
})();

